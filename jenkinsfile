pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'nishantnesargi123/python-app'
        DOCKER_TAG = 'latest'
        SONARQUBE_ENV = 'SonarScanner'
        SONAR_AUTH_TOKEN = credentials('sonar-token-id')  // Add your SonarQube token credential ID here
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/nishantnesargi13/CICD-TEST.git'
            }
        }

        stage('SonarQube Scan') {
            steps {
                withSonarQubeEnv("${SONARQUBE_ENV}") {
                    script {
                        def scannerHome = tool 'sonarscanner'
                        sh """
                          ${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=myapp \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=http://sonarqube:9000 \
                            -Dsonar.login=${SONAR_AUTH_TOKEN}
                        """
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                // Wait for SonarQube Quality Gate result, abort pipeline if it fails
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                    sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
            }
        }

        stage('Manual Approval') {
            steps {
                input message: "Deploy to Kubernetes?", ok: "Deploy"
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh "helm upgrade --install myapp ./helm-chart --set image.repository=${DOCKER_IMAGE},image.tag=${DOCKER_TAG}"
            }
        }
    }
}
